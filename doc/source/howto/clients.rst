.. |br| raw:: html

    <br />

Connecting to Things with Clients
=================================

When using a HTTP server, it is possible to use any HTTP client including web browser provided clients like ``XMLHttpRequest`` 
object. This is the intention of providing HTTP support. However, additional possibilities exist which are noteworthy:

Using ``hololinked.client``
---------------------------

To use ZMQ transport methods to connect to the server instead of HTTP, one can use an object proxy available in 
``hololinked.client``. For certain applications, for example, oscilloscope traces consisting of millions of data points, 
or, camera images or video streaming with raw pixel density & no compression, the ZMQ transport may significantly speed 
up the data transfer rate. Especially one may use a different serializer like MessagePack instead of JSON. 
JSON is the default, and currently the only supported serializer for HTTP applications and is still meant to be used 
to interface such data-heavy devices with HTTP clients. Nevertheless, ZMQ transport is simultaneously possible along 
with using HTTP, also with a different serializer based on requirement. 
|br|
To use a ZMQ client from a different process other than the ``Thing``'s running process, one needs to start the 
``Thing`` server using TCP or IPC (inter-process communication) transport methods and **not** with ``run_with_http_server()`` method:

.. literalinclude:: code/rpc.py
    :language: python
    :linenos: 
    :lines: 1-3, 7-11, 45-64

Then, import the ``ObjectProxy`` and specify the ZMQ transport method and ``instance_name`` to connect to the server and 
the object it serves: 

.. literalinclude:: code/rpc_client.py
    :language: python
    :linenos: 
    :lines: 1-9

One would be making such remote procedure calls from a PyQt graphical interface, custom acquisition scripts or 
measurement scan routines which may be running in the same or a different computer on the network. Use TCP ZMQ transport 
to be accessible from network clients.

.. literalinclude:: code/rpc.py 
    :language: python
    :linenos: 
    :lines: 58, 67-70

Irrespective of client's request origin, requests are always queued before executing. 

If one needs type definitions for the client because the client does not know the server to which it is connected, one 
can import the server script ``Thing`` and set it as the type of the client as a quick-hack. 

.. literalinclude:: code/rpc_client.py 
    :language: python 
    :linenos: 
    :lines: 14-20

Apart from property read-write and action execution on the client side, one can subscribe to the event to receive data:

.. literalinclude:: code/rpc_client.py 
    :language: python 
    :linenos: 
    :lines: 22-27

Serializer customization is discussed in :doc:`Serializer How-To <serializers>`

Using ``node-wot`` client
-------------------------

.. note::
    Requires Javascript knowledge to follow. Consult introductory article otherwise. 

``node-wot`` is an interoperable Javascript client provided by the `Web of Things Working Group <https://www.w3.org/WoT/>`_. 
The purpose of this client is to be able to interact with devices with a web standard compatible JSON specification called 
as the "`Thing Description <https://www.w3.org/TR/wot-thing-description11/>`_", which 
allows interoperability irrespective of protocol implementation and application domain. The said JSON specfication 
describes the device's available properties, actions and events and enhances human-readable documentation of the device 
within the specification itself, enhancing developer experience. |br| |br|
``node-wot`` already has protocol bindings like HTTP, CoAP, Modbus, MQTT etc. which can be used in nodeJS or in web browsers. 
Since ``hololinked`` offers the possibility of HTTP bindings for devices, such a JSON Thing description is auto generated by the 
``hololinked.server.thing.Thing`` class to be able to use by the node-wot client. To use the node-wot client, 
first load the Thing description from the server after creating the ``Servient``:





Further, the entire namespace of ``hololinked`` to use the words ``Thing``, properties, actions 
and events are meant to maintain an acceptable compatibility with the standard. To use the ``node-wot`` client,  